"""
interval min max python implementation
This is for accuaracy testing
"""

raw_audio = [
    196608, 458752, 0, 327680, 458752, 262144, 196608, 458752, 327680, 327680,
    131072, 196608, -65536, 0, 262144, 131072, -131072, -65536, 65536, 65536,
    65536, -131072, -131072, 65536, 131072, -262144, -262144, 0, -131072, -196608,
    -131072, -65536, -196608, -393216, -458752, -327680, -196608, -196608, -327680,-262144,
    -524288, -327680, -589824, -524288, -524288, -393216, -589824, -720896, -851968, -720896,
    -786432, -720896, -786432, -786432, -655360, -720896, -851968, -917504, -589824, -851968, 
    -589824, -589824, -786432, -1048576, -917504, -1245184, -983040, -1048576, -851968, -1048576, 
    -983040, -1048576, -1048576, -917504, -917504, -1114112, -1179648, -917504, -983040, -1376256,
    -1245184, -983040, -1245184, -1179648, -1310720, -1114112, -1245184, -1245184, -1441792, -1245184, 
    -1245184, -1376256, -1441792, -1507328, -1310720, -1507328, -1441792, -1769472, -1376256, -1441792
]

interval_len = 10
num_intervals = len(raw_audio) // interval_len

out_max = []
out_min = []

for i in range(num_intervals):
    interval_data = raw_audio[i * interval_len : (i + 1) * interval_len]
    max_val = max(interval_data)
    min_val = min(interval_data)
    out_max.append(max_val)
    out_min.append(min_val)
    print(f"{max_val = }, {min_val = } in interval {interval_data}")

# Print the results
for i in range(num_intervals):
   print(f"{i}. Maximum: {out_max[i]}, Minimum: {out_min[i]}")
